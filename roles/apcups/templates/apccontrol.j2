#!/bin/sh
#
# Copyright (C) 1999-2002 Riccardo Facchetti <riccardo@master.oasi.gpa.it>
#
# platforms/apccontrol.  Generated from apccontrol.in by configure.
#
#  Note, this is a generic file that can be used by most
#   systems. If a particular system needs to have something
#   special, start with this file, and put a copy in the
#   platform subdirectory.
#

#
# These variables are needed for set up the autoconf other variables.
#
prefix=/usr
exec_prefix=${prefix}

APCPID=/var/run/apcupsd.pid
APCUPSD=/sbin/apcupsd
SHUTDOWN=/sbin/shutdown
SCRIPTSHELL=/bin/sh
SCRIPTDIR=/etc/apcupsd
WALL=wall

APIPATHBEGINNING="{{apiPathBeginning}}"

export SYSADMIN=root
export APCUPSD_MAIL="mail"
if [ -f $SCRIPTDIR/config ]; then . $SCRIPTDIR/config ; fi

#
# Concatenate all output from this script to the events file
#  Note, the following kills the script in a power fail situation
#   where the disks are mounted read-only.
# exec >>/var/log/apcupsd.events 2>&1

#
# This piece is to substitute the default behaviour with your own script,
# perl, or C program.
# You can customize every single command creating an executable file (may be a
# script or a compiled program) and calling it the same as the $1 parameter
# passed by apcupsd to this script.
#
# After executing your script, apccontrol continues with the default action.
# If you do not want apccontrol to continue, exit your script with exit 
# code 99. E.g. "exit 99".
#
# WARNING: the apccontrol file will be overwritten every time you update your
# apcupsd, doing `make install'. Your own customized scripts will _not_ be
# overwritten. If you wish to make changes to this file (discouraged), you
# should change apccontrol.sh.in and then rerun the configure process.
#
if [ -f ${SCRIPTDIR}/${1} -a -x ${SCRIPTDIR}/${1} ]
then
    ${SCRIPTDIR}/${1} ${2} ${3} ${4}
    # exit code 99 means he does not want us to do default action
    if [ $? = 99 ] ; then
	exit 0
    fi
fi

case "$1" in
    killpower)
	echo "Apccontrol doing: ${APCUPSD} --killpower on UPS ${2}" | (${WALL} 2>/dev/null || cat)
	sleep 10
	${APCUPSD} --killpower
	echo "Apccontrol has done: ${APCUPSD} --killpower on UPS ${2}" | (${WALL} 2>/dev/null || cat)
    ;;
    commfailure)
	echo "Warning communications lost with UPS ${2}" | ${WALL}
    ;;
    commok)
	echo "Communications restored with UPS ${2}" | ${WALL}
    ;;
#
# powerout, onbattery, offbattery, mainsback events occur
#   in that order.
#
    powerout)
    ;;
    onbattery)
	echo "Power failure on UPS ${2}. Running on batteries." | ${WALL}
	curl -XGET "$APIPATHBEGINNING"'Power%20failure%20on%20UPS.%20Running%20on%20batteries.'
    ;;
    offbattery)
	echo "Power has returned on UPS ${2}..." | ${WALL}
	curl -XGET "$APIPATHBEGINNING"'Power%20has%20returned%20on%20UPS'
    ;;
    mainsback)
	if [ -f /etc/apcupsd/powerfail ] ; then
	   printf "Continuing with shutdown."  | ${WALL}
	   curl -XGET "$APIPATHBEGINNING"'Continuing%20with%20shutdown.'
	fi
    ;;
    failing)
	echo "Battery power exhausted on UPS ${2}. Doing shutdown." | ${WALL}
	curl -XGET "$APIPATHBEGINNING"'Battery%20power%20exhausted%20on%20UPS.%20Doing%20shutdown.'
    ;;
    timeout)
	echo "Battery time limit exceeded on UPS ${2}. Doing shutdown." | ${WALL}
	curl -XGET "$APIPATHBEGINNING"'Battery%20time%20limit%20exceeded%20on%20UPS.%20Doing%20shutdown.'
    ;;
    loadlimit)
	echo "Remaining battery charge below limit on UPS ${2}. Doing shutdown." | ${WALL}
	curl -XGET "$APIPATHBEGINNING"'Remaining%20battery%20charge%20below%20limit%20on%20UPS.%20Doing%20shutdown.'
    ;;
    runlimit)
	echo "Remaining battery runtime below limit on UPS ${2}. Doing shutdown." | ${WALL}
	curl -XGET "$APIPATHBEGINNING"'Remaining%20battery%20runtime%20below%20limit%20on%20UPS.%20Doing%20shutdown.'
    ;;
    doreboot)
	echo "UPS ${2} initiating Reboot Sequence" | ${WALL}
	curl -XGET "$APIPATHBEGINNING"'UPS%20initiated%20Reboot%20Sequence'
	${SHUTDOWN} -r now "apcupsd UPS ${2} initiated reboot"
    ;;
    doshutdown)
	echo "UPS ${2} initiated Shutdown Sequence" | ${WALL}
	curl -XGET "$APIPATHBEGINNING"'UPS%20initiated%20Shutdown%20Sequence'
	${SHUTDOWN} -h now "apcupsd UPS ${2} initiated shutdown"
    ;;
    annoyme)
	echo "Power problems with UPS ${2}. Please logoff." | ${WALL}
    ;;
    emergency)
	echo "Emergency Shutdown. Possible battery failure on UPS ${2}." | ${WALL}
	curl -XGET "$APIPATHBEGINNING"'Emergency%20Shutdown.%20Possible%20battery%20failure%20on%20UPS.'
    ;;
    changeme)
	echo "Emergency! Batteries have failed on UPS ${2}. Change them NOW" | ${WALL}
	curl -XGET "$APIPATHBEGINNING"'Emergency!%20Batteries%20have%20failed%20on%20UPS.'
    ;;
    remotedown)
	echo "Remote Shutdown. Beginning Shutdown Sequence." | ${WALL}
    ;;
    startselftest)
    ;;
    endselftest)
    ;;
    battdetach)
    ;;
    battattach)
    ;;
    *)	echo "Usage: ${0##*/} command"
	echo "	     warning: this script is intended to be launched by"
	echo "	     apcupsd and should never be launched by users."
	exit 1
    ;;
esac
